{
  "robots": [
    {
      "x": 1,
      "y": 1,
      "_orientation": 0,
      "possible_initial_positions": [
        [
          1,
          1
        ]
      ],
      "objects": {},
      "_is_leaky": true,
      "_prev_x": 1,
      "_prev_y": 1,
      "_prev_orientation": 0,
      "_trace_history": [],
      "_trace_style": "default",
      "_trace_color": "cyan",
      "__id": 2,
      "model": "light blue"
    }
  ],
  "small_tiles": false,
  "rows": 5,
  "cols": 14,
  "pre": [
    "RUR.show_path(RUR.public['path'], \"darkslategray\");",
    ""
  ],
  "post": [
    "RUR.public.my_check(\"Reeborg did not follow the correct path.\");",
    ""
  ],
  "description": [
    "<h1>Hurdles race</h1>",
    "Reeborg has entered a hurdle race. ",
    "Make him run the course, following the path shown.<br><br>",
    "<em>The position, the height and the number of hurdles changes each time this world is reloaded.</em>",
    "<h3>What you need to know</h3>",
    "<p>You should be able to write programs that are valid for worlds <b>Around 4</b> and <b>Hurdles 3</b>,",
    "and ot combine them for this last hurdles race.</p>",
    "<p>Your program should also be valid for worlds",
    "<b>Hurdles 1</b>, <b>Hurdles 2</b> et <b>Hurdles 3</b></p>",
    "DIFFICULTY5",
    "<p>Background image: <a href='https://www.pexels.com/photo/action-athletes-audience-ball-270154/'>www.pexels.com</a></p>"
  ],
  "onload": [
    "var x, y, height, last_element;",
    "RUR.public['path'] = [[1, 1]]",
    "RUR.set_model('light blue');",
    "RUR._set_trace_color_('cyan');",
    "",
    "function append_unique(pt) {",
    "    var last, arr = RUR.public.path;",
    "    if (arr[arr.length -1] === undefined) {",
    "        arr.push([pt[0], pt[1]]);",
    "        return;",
    "    }",
    "    last = arr[arr.length-1];",
    "    if (last[0] == pt[0] && last[1] == pt[1]) {",
    "        return;",
    "    }",
    "    arr.push([pt[0], pt[1]]);",
    "}",
    "// build a random path",
    "for (x=1; x <= 12; x++) {",
    "    if (RUR.randint(1, 2)==1) {",
    "        height = RUR.randint(1, 4);",
    "        for (y=1; y<=height; y++) {",
    "            RUR.add_wall(\"east\", x, y);",
    "            append_unique([x, y+1]);",
    "        }",
    "        append_unique([x+1, height+1])",
    "        for(y=height; y>=1; y--) {",
    "            append_unique([x+1, y]);",
    "        }",
    "    }",
    "    append_unique([x+1, 1]);",
    "}",
    "",
    "// We show the desired path very clearly;  in the",
    "// Pre editor, we will set it to be less visible",
    "RUR.show_path(RUR.public['path'], 'black');",
    "",
    "// We also add semi-transparent tiles over the background",
    "// image to show the desired path. We define a function",
    "// as we will need to redo this once the path is trimmed",
    "RUR.public.show_background = function () {",
    "    for (i=0; i < RUR.public.path.length; i++ ){",
    "        x = RUR.public.path[i][0];",
    "        y = RUR.public.path[i][1];",
    "        RUR.add_colored_tile('rgba(255, 255, 255, 0.5)', x, y);",
    "    }",
    "}",
    "RUR.public.show_background();",
    "",
    "// Since RUR.public['path'] is defined, setting the following to true ",
    "// and not simply a truthy value, will make the grid show ONLY on",
    "// the path",
    "",
    "RUR.state.visible_grid = true;",
    "// The following is going to be called in the Post editor",
    "// we want users to be able to use either Python or Javascript",
    "// to solve this task - so we cannot have Python or Javascript",
    "// specific syntax in either the Pre or the Post editor",
    "",
    "RUR.public.my_check = function (failure) {",
    "    if ( RUR.check_path(RUR.public['path']) ) {",
    "        return; // nothing else required.",
    "    }",
    "",
    "    // The program did not work ... let's show all the required",
    "    // feedback in essentially one step",
    "    recording(false); // do not record a new frame for each action",
    "",
    "    //let's make the background picture less visible",
    "    // by covering the entire background with semi-transparent black tiles",
    "    RUR.fill_background('rgba(0, 0, 0, 0.6)');",
    "    // We also show the path again",
    "    RUR.show_path(RUR.public['path'], 'orange');",
    "   ",
    "    // all desired changes done; ready to show them",
    "    recording(true);",
    "",
    "    // finally, we throw an error to end the execution",
    "    // and record the final frame",
    "    throw new RUR.ReeborgError(failure);",
    "}",
    ""
  ],
  "background_image": "worlds/images/stadium.png",
  "goal": {
    "possible_final_positions": [
      [
        13,
        1
      ]
    ],
    "position": {
      "image": "racing_flag",
      "x": 13,
      "y": 1
    }
  },
  "walls": {
    "1,1": [
      "east"
    ],
    "2,1": [
      "east"
    ],
    "2,2": [
      "east"
    ],
    "2,3": [
      "east"
    ],
    "3,1": [
      "east"
    ],
    "3,2": [
      "east"
    ],
    "3,3": [
      "east"
    ],
    "3,4": [
      "east"
    ],
    "8,1": [
      "east"
    ],
    "8,2": [
      "east"
    ],
    "8,3": [
      "east"
    ],
    "9,1": [
      "east"
    ],
    "9,2": [
      "east"
    ],
    "9,3": [
      "east"
    ],
    "11,1": [
      "east"
    ],
    "11,2": [
      "east"
    ],
    "12,1": [
      "east"
    ],
    "12,2": [
      "east"
    ],
    "12,3": [
      "east"
    ],
    "12,4": [
      "east"
    ]
  },
  "_CORRECT_PATH": [
    [
      1,
      1
    ],
    [
      1,
      2
    ],
    [
      2,
      2
    ],
    [
      2,
      1
    ],
    [
      2,
      2
    ],
    [
      2,
      3
    ],
    [
      2,
      4
    ],
    [
      3,
      4
    ],
    [
      3,
      3
    ],
    [
      3,
      2
    ],
    [
      3,
      1
    ],
    [
      3,
      2
    ],
    [
      3,
      3
    ],
    [
      3,
      4
    ],
    [
      3,
      5
    ],
    [
      4,
      5
    ],
    [
      4,
      4
    ],
    [
      4,
      3
    ],
    [
      4,
      2
    ],
    [
      4,
      1
    ],
    [
      5,
      1
    ],
    [
      6,
      1
    ],
    [
      7,
      1
    ],
    [
      8,
      1
    ],
    [
      8,
      2
    ],
    [
      8,
      3
    ],
    [
      8,
      4
    ],
    [
      9,
      4
    ],
    [
      9,
      3
    ],
    [
      9,
      2
    ],
    [
      9,
      1
    ],
    [
      9,
      2
    ],
    [
      9,
      3
    ],
    [
      9,
      4
    ],
    [
      10,
      4
    ],
    [
      10,
      3
    ],
    [
      10,
      2
    ],
    [
      10,
      1
    ],
    [
      11,
      1
    ],
    [
      11,
      2
    ],
    [
      11,
      3
    ],
    [
      12,
      3
    ],
    [
      12,
      2
    ],
    [
      12,
      1
    ],
    [
      12,
      2
    ],
    [
      12,
      3
    ],
    [
      12,
      4
    ],
    [
      12,
      5
    ],
    [
      13,
      5
    ],
    [
      13,
      4
    ],
    [
      13,
      3
    ],
    [
      13,
      2
    ],
    [
      13,
      1
    ]
  ],
  "_CORRECT_PATH_COLOR": "black",
  "tiles": {
    "1,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "1,2": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "2,2": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "2,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "2,3": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "2,4": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "3,4": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "3,3": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "3,2": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "3,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "3,5": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "4,5": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "4,4": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "4,3": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "4,2": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "4,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "5,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "6,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "7,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "8,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "8,2": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "8,3": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "8,4": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "9,4": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "9,3": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "9,2": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "9,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "10,4": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "10,3": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "10,2": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "10,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "11,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "11,2": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "11,3": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "12,3": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "12,2": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "12,1": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "12,4": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "12,5": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "13,5": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "13,4": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "13,3": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "13,2": [
      "rgba(255, 255, 255, 0.5)"
    ],
    "13,1": [
      "rgba(255, 255, 255, 0.5)"
    ]
  }
}